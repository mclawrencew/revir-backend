{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const \{ DataTypes \} = require('sequelize');\
const bcrypt = require('bcryptjs');\
const jwt = require('jsonwebtoken');\
const \{ sequelize \} = require('../config/database');\
\
const User = sequelize.define('User', \{\
  id: \{\
    type: DataTypes.UUID,\
    defaultValue: DataTypes.UUIDV4,\
    primaryKey: true\
  \},\
  email: \{\
    type: DataTypes.STRING,\
    allowNull: false,\
    unique: true,\
    validate: \{\
      isEmail: true\
    \}\
  \},\
  password: \{\
    type: DataTypes.STRING,\
    allowNull: false\
  \},\
  firstName: \{\
    type: DataTypes.STRING,\
    allowNull: false\
  \},\
  lastName: \{\
    type: DataTypes.STRING,\
    allowNull: false\
  \},\
  phoneNumber: \{\
    type: DataTypes.STRING,\
    validate: \{\
      is: /^[\\+]?[(]?[0-9]\{3\}[)]?[-\\s\\.]?[(]?[0-9]\{3\}[)]?[-\\s\\.]?[0-9]\{4,6\}$/im\
    \}\
  \},\
  dateOfBirth: \{\
    type: DataTypes.DATEONLY\
  \},\
  preferences: \{\
    type: DataTypes.JSON,\
    defaultValue: \{\
      currency: 'USD',\
      language: 'en',\
      notifications: \{\
        email: true,\
        sms: false,\
        push: true,\
        newsletter: true\
      \},\
      theme: 'light'\
    \}\
  \},\
  travelProfile: \{\
    type: DataTypes.JSON,\
    defaultValue: \{\
      preferredClass: 'economy',\
      preferredAirlines: [],\
      preferredHotelChains: [],\
      seatPreference: 'window',\
      mealPreference: 'none',\
      dietaryRestrictions: [],\
      accessibility: [],\
      loyaltyPrograms: []\
    \}\
  \},\
  isVerified: \{\
    type: DataTypes.BOOLEAN,\
    defaultValue: false\
  \},\
  verificationToken: \{\
    type: DataTypes.STRING\
  \},\
  resetPasswordToken: \{\
    type: DataTypes.STRING\
  \},\
  resetPasswordExpire: \{\
    type: DataTypes.DATE\
  \},\
  lastLogin: \{\
    type: DataTypes.DATE\
  \},\
  loginAttempts: \{\
    type: DataTypes.INTEGER,\
    defaultValue: 0\
  \},\
  lockUntil: \{\
    type: DataTypes.DATE\
  \},\
  isActive: \{\
    type: DataTypes.BOOLEAN,\
    defaultValue: true\
  \},\
  role: \{\
    type: DataTypes.ENUM('user', 'admin', 'super_admin'),\
    defaultValue: 'user'\
  \}\
\}, \{\
  timestamps: true,\
  paranoid: true, // Soft delete\
  hooks: \{\
    beforeSave: async (user) => \{\
      // Hash password if it's being changed\
      if (user.changed('password')) \{\
        const saltRounds = parseInt(process.env.BCRYPT_ROUNDS) || 10;\
        user.password = await bcrypt.hash(user.password, saltRounds);\
      \}\
    \}\
  \},\
  indexes: [\
    \{ fields: ['email'] \},\
    \{ fields: ['resetPasswordToken'] \},\
    \{ fields: ['verificationToken'] \}\
  ]\
\});\
\
// Instance methods\
User.prototype.comparePassword = async function(candidatePassword) \{\
  return await bcrypt.compare(candidatePassword, this.password);\
\};\
\
User.prototype.generateAuthToken = function() \{\
  return jwt.sign(\
    \{ \
      id: this.id, \
      email: this.email,\
      role: this.role \
    \},\
    process.env.JWT_SECRET,\
    \{ expiresIn: process.env.JWT_EXPIRE || '30d' \}\
  );\
\};\
\
User.prototype.generateRefreshToken = function() \{\
  return jwt.sign(\
    \{ id: this.id \},\
    process.env.REFRESH_TOKEN_SECRET || process.env.JWT_SECRET,\
    \{ expiresIn: process.env.REFRESH_TOKEN_EXPIRE || '90d' \}\
  );\
\};\
\
// Remove sensitive data when converting to JSON\
User.prototype.toJSON = function() \{\
  const values = Object.assign(\{\}, this.get());\
  delete values.password;\
  delete values.resetPasswordToken;\
  delete values.verificationToken;\
  return values;\
\};\
\
module.exports = User;}