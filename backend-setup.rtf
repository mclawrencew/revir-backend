{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // ===== PACKAGE.JSON =====\
// Save this as backend/package.json\
/*\
\{\
  "name": "revir-backend",\
  "version": "1.0.0",\
  "description": "REVIR AI-Powered Travel Platform Backend",\
  "main": "server.js",\
  "scripts": \{\
    "start": "node server.js",\
    "dev": "nodemon server.js",\
    "test": "jest"\
  \},\
  "dependencies": \{\
    "express": "^4.18.2",\
    "mongoose": "^7.0.3",\
    "cors": "^2.8.5",\
    "dotenv": "^16.0.3",\
    "bcryptjs": "^2.4.3",\
    "jsonwebtoken": "^9.0.0",\
    "express-validator": "^7.0.1",\
    "axios": "^1.4.0",\
    "stripe": "^12.4.0",\
    "nodemailer": "^6.9.1",\
    "express-rate-limit": "^6.7.0",\
    "helmet": "^7.0.0",\
    "compression": "^1.7.4",\
    "morgan": "^1.10.0",\
    "multer": "^1.4.5-lts.1",\
    "socket.io": "^4.6.1",\
    "redis": "^4.6.5",\
    "node-cron": "^3.0.2"\
  \},\
  "devDependencies": \{\
    "nodemon": "^2.0.22",\
    "jest": "^29.5.0",\
    "supertest": "^6.3.3"\
  \}\
\}\
*/\
\
// ===== SERVER.JS =====\
// Save this as backend/server.js\
const express = require('express');\
const mongoose = require('mongoose');\
const cors = require('cors');\
const helmet = require('helmet');\
const compression = require('compression');\
const morgan = require('morgan');\
const rateLimit = require('express-rate-limit');\
require('dotenv').config();\
\
// Import routes\
const authRoutes = require('./routes/auth');\
const userRoutes = require('./routes/users');\
const flightRoutes = require('./routes/flights');\
const hotelRoutes = require('./routes/hotels');\
const bookingRoutes = require('./routes/bookings');\
const paymentRoutes = require('./routes/payments');\
const aiRoutes = require('./routes/ai');\
\
// Create Express app\
const app = express();\
\
// Security middleware\
app.use(helmet());\
app.use(cors(\{\
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',\
  credentials: true\
\}));\
\
// Rate limiting\
const limiter = rateLimit(\{\
  windowMs: 15 * 60 * 1000, // 15 minutes\
  max: 100 // limit each IP to 100 requests per windowMs\
\});\
app.use('/api/', limiter);\
\
// Body parser middleware\
app.use(express.json(\{ limit: '10mb' \}));\
app.use(express.urlencoded(\{ extended: true, limit: '10mb' \}));\
app.use(compression());\
app.use(morgan('dev'));\
\
// MongoDB connection\
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/revir', \{\
  useNewUrlParser: true,\
  useUnifiedTopology: true,\
\})\
.then(() => console.log('MongoDB connected'))\
.catch(err => console.error('MongoDB connection error:', err));\
\
// API Routes\
app.use('/api/auth', authRoutes);\
app.use('/api/users', userRoutes);\
app.use('/api/flights', flightRoutes);\
app.use('/api/hotels', hotelRoutes);\
app.use('/api/bookings', bookingRoutes);\
app.use('/api/payments', paymentRoutes);\
app.use('/api/ai', aiRoutes);\
\
// Health check\
app.get('/api/health', (req, res) => \{\
  res.json(\{ \
    status: 'OK', \
    timestamp: new Date().toISOString(),\
    environment: process.env.NODE_ENV || 'development'\
  \});\
\});\
\
// Error handling middleware\
app.use((err, req, res, next) => \{\
  console.error(err.stack);\
  res.status(err.status || 500).json(\{\
    message: err.message || 'Something went wrong!',\
    error: process.env.NODE_ENV === 'development' ? err : \{\}\
  \});\
\});\
\
// 404 handler\
app.use((req, res) => \{\
  res.status(404).json(\{ message: 'Route not found' \});\
\});\
\
// Start server\
const PORT = process.env.PORT || 5000;\
app.listen(PORT, () => \{\
  console.log(`REVIR Backend running on port $\{PORT\}`);\
\});\
\
// ===== ENVIRONMENT VARIABLES (.env) =====\
// Save this as backend/.env\
/*\
NODE_ENV=development\
PORT=5000\
FRONTEND_URL=http://localhost:3000\
\
# MongoDB\
MONGODB_URI=mongodb://localhost:27017/revir\
\
# JWT\
JWT_SECRET=your-super-secret-jwt-key-change-this\
JWT_EXPIRE=30d\
\
# Email\
EMAIL_HOST=smtp.gmail.com\
EMAIL_PORT=587\
EMAIL_USER=your-email@gmail.com\
EMAIL_PASS=your-email-password\
\
# Stripe\
STRIPE_SECRET_KEY=your-stripe-secret-key\
\
# External APIs\
AMADEUS_API_KEY=your-amadeus-api-key\
AMADEUS_API_SECRET=your-amadeus-api-secret\
SKYSCANNER_API_KEY=your-skyscanner-api-key\
OPENAI_API_KEY=your-openai-api-key\
\
# Redis (optional)\
REDIS_URL=redis://localhost:6379\
*/\
\
// ===== USER MODEL =====\
// Save this as backend/models/User.js\
const mongoose = require('mongoose');\
const bcrypt = require('bcryptjs');\
const jwt = require('jsonwebtoken');\
\
const userSchema = new mongoose.Schema(\{\
  name: \{\
    type: String,\
    required: [true, 'Please provide a name'],\
    trim: true,\
    maxLength: [50, 'Name cannot be more than 50 characters']\
  \},\
  email: \{\
    type: String,\
    required: [true, 'Please provide an email'],\
    unique: true,\
    lowercase: true,\
    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w\{2,3\})+$/, 'Please provide a valid email']\
  \},\
  password: \{\
    type: String,\
    required: [true, 'Please provide a password'],\
    minLength: [6, 'Password must be at least 6 characters'],\
    select: false\
  \},\
  avatar: \{\
    type: String,\
    default: null\
  \},\
  role: \{\
    type: String,\
    enum: ['user', 'admin'],\
    default: 'user'\
  \},\
  preferences: \{\
    currency: \{\
      type: String,\
      default: 'USD'\
    \},\
    language: \{\
      type: String,\
      default: 'EN'\
    \},\
    notifications: \{\
      email: \{ type: Boolean, default: true \},\
      sms: \{ type: Boolean, default: false \},\
      push: \{ type: Boolean, default: true \}\
    \},\
    travelPreferences: \{\
      seatPreference: \{ type: String, enum: ['window', 'aisle', 'middle', 'any'], default: 'any' \},\
      mealPreference: \{ type: String, default: 'any' \},\
      hotelPreference: \{\
        starRating: \{ type: Number, min: 1, max: 5, default: 3 \},\
        amenities: [String]\
      \}\
    \}\
  \},\
  wallet: \{\
    balance: \{\
      type: Number,\
      default: 0\
    \},\
    currency: \{\
      type: String,\
      default: 'USD'\
    \},\
    transactions: [\{\
      type: mongoose.Schema.Types.ObjectId,\
      ref: 'Transaction'\
    \}]\
  \},\
  savedSearches: [\{\
    type: \{\
      type: String,\
      enum: ['flight', 'hotel', 'car', 'package']\
    \},\
    criteria: Object,\
    createdAt: \{\
      type: Date,\
      default: Date.now\
    \}\
  \}],\
  favoriteDestinations: [String],\
  travelHistory: [\{\
    destination: String,\
    date: Date,\
    type: String\
  \}],\
  loyaltyPoints: \{\
    type: Number,\
    default: 0\
  \},\
  emailVerified: \{\
    type: Boolean,\
    default: false\
  \},\
  emailVerificationToken: String,\
  passwordResetToken: String,\
  passwordResetExpire: Date,\
  createdAt: \{\
    type: Date,\
    default: Date.now\
  \},\
  lastLogin: Date\
\}, \{\
  timestamps: true\
\});\
\
// Encrypt password before saving\
userSchema.pre('save', async function(next) \{\
  if (!this.isModified('password')) \{\
    return next();\
  \}\
  const salt = await bcrypt.genSalt(10);\
  this.password = await bcrypt.hash(this.password, salt);\
  next();\
\});\
\
// Match user password\
userSchema.methods.matchPassword = async function(enteredPassword) \{\
  return await bcrypt.compare(enteredPassword, this.password);\
\};\
\
// Generate JWT token\
userSchema.methods.getSignedJwtToken = function() \{\
  return jwt.sign(\{ id: this._id \}, process.env.JWT_SECRET, \{\
    expiresIn: process.env.JWT_EXPIRE\
  \});\
\};\
\
module.exports = mongoose.model('User', userSchema);\
\
// ===== BOOKING MODEL =====\
// Save this as backend/models/Booking.js\
const mongoose = require('mongoose');\
\
const bookingSchema = new mongoose.Schema(\{\
  user: \{\
    type: mongoose.Schema.Types.ObjectId,\
    ref: 'User',\
    required: true\
  \},\
  bookingReference: \{\
    type: String,\
    unique: true,\
    required: true\
  \},\
  type: \{\
    type: String,\
    enum: ['flight', 'hotel', 'car', 'package'],\
    required: true\
  \},\
  status: \{\
    type: String,\
    enum: ['pending', 'confirmed', 'cancelled', 'completed', 'refunded'],\
    default: 'pending'\
  \},\
  // Flight specific fields\
  flight: \{\
    airline: String,\
    flightNumber: String,\
    departure: \{\
      airport: String,\
      city: String,\
      country: String,\
      date: Date,\
      terminal: String,\
      gate: String\
    \},\
    arrival: \{\
      airport: String,\
      city: String,\
      country: String,\
      date: Date,\
      terminal: String\
    \},\
    duration: String,\
    class: String,\
    passengers: [\{\
      title: String,\
      firstName: String,\
      lastName: String,\
      dateOfBirth: Date,\
      passport: String,\
      nationality: String,\
      seatNumber: String\
    \}]\
  \},\
  // Hotel specific fields\
  hotel: \{\
    name: String,\
    address: String,\
    city: String,\
    country: String,\
    checkIn: Date,\
    checkOut: Date,\
    rooms: [\{\
      type: String,\
      guests: Number,\
      bedType: String,\
      amenities: [String]\
    \}],\
    totalNights: Number\
  \},\
  // Car rental specific fields\
  car: \{\
    company: String,\
    model: String,\
    type: String,\
    pickupLocation: String,\
    dropoffLocation: String,\
    pickupDate: Date,\
    dropoffDate: Date,\
    driver: \{\
      name: String,\
      license: String,\
      age: Number\
    \}\
  \},\
  // Package specific fields\
  package: \{\
    name: String,\
    description: String,\
    includes: [String],\
    startDate: Date,\
    endDate: Date,\
    destinations: [String]\
  \},\
  // Pricing\
  pricing: \{\
    basePrice: Number,\
    taxes: Number,\
    fees: Number,\
    discount: Number,\
    total: Number,\
    currency: String,\
    breakdown: [\{\
      item: String,\
      amount: Number\
    \}]\
  \},\
  // Payment\
  payment: \{\
    method: String,\
    status: String,\
    transactionId: String,\
    paidAt: Date\
  \},\
  // Additional info\
  specialRequests: String,\
  insuranceIncluded: Boolean,\
  cancellationPolicy: String,\
  aiRecommendations: [\{\
    type: String,\
    suggestion: String,\
    savings: Number\
  \}],\
  createdAt: \{\
    type: Date,\
    default: Date.now\
  \}\
\}, \{\
  timestamps: true\
\});\
\
// Generate booking reference\
bookingSchema.pre('save', async function(next) \{\
  if (!this.bookingReference) \{\
    this.bookingReference = 'RVR' + Date.now().toString(36).toUpperCase() + Math.random().toString(36).substring(2, 5).toUpperCase();\
  \}\
  next();\
\});\
\
module.exports = mongoose.model('Booking', bookingSchema);\
\
// ===== FLIGHT MODEL =====\
// Save this as backend/models/Flight.js\
const mongoose = require('mongoose');\
\
const flightSchema = new mongoose.Schema(\{\
  airline: \{\
    code: String,\
    name: String,\
    logo: String\
  \},\
  flightNumber: String,\
  aircraft: \{\
    model: String,\
    seats: Number\
  \},\
  departure: \{\
    airport: \{\
      code: String,\
      name: String,\
      city: String,\
      country: String\
    \},\
    scheduledTime: Date,\
    terminal: String,\
    gate: String\
  \},\
  arrival: \{\
    airport: \{\
      code: String,\
      name: String,\
      city: String,\
      country: String\
    \},\
    scheduledTime: Date,\
    terminal: String\
  \},\
  duration: \{\
    hours: Number,\
    minutes: Number\
  \},\
  distance: Number,\
  classes: [\{\
    type: \{\
      type: String,\
      enum: ['economy', 'premium_economy', 'business', 'first']\
    \},\
    price: \{\
      amount: Number,\
      currency: String\
    \},\
    availability: Number,\
    amenities: [String],\
    baggage: \{\
      cabin: String,\
      checked: String\
    \}\
  \}],\
  stops: [\{\
    airport: \{\
      code: String,\
      name: String,\
      city: String\
    \},\
    duration: Number,\
    layoverTime: Number\
  \}],\
  status: \{\
    type: String,\
    enum: ['scheduled', 'boarding', 'departed', 'landed', 'cancelled', 'delayed'],\
    default: 'scheduled'\
  \},\
  operatedBy: String,\
  codeShare: [String],\
  source: String, // Which API/source this came from\
  lastUpdated: \{\
    type: Date,\
    default: Date.now\
  \}\
\}, \{\
  timestamps: true\
\});\
\
// Index for efficient searching\
flightSchema.index(\{ 'departure.airport.code': 1, 'arrival.airport.code': 1, 'departure.scheduledTime': 1 \});\
\
module.exports = mongoose.model('Flight', flightSchema);\
\
// ===== HOTEL MODEL =====\
// Save this as backend/models/Hotel.js\
const mongoose = require('mongoose');\
\
const hotelSchema = new mongoose.Schema(\{\
  name: \{\
    type: String,\
    required: true\
  \},\
  chain: String,\
  category: \{\
    type: String,\
    enum: ['hotel', 'resort', 'motel', 'hostel', 'apartment', 'villa']\
  \},\
  starRating: \{\
    type: Number,\
    min: 1,\
    max: 5\
  \},\
  location: \{\
    address: String,\
    city: String,\
    state: String,\
    country: String,\
    postalCode: String,\
    coordinates: \{\
      latitude: Number,\
      longitude: Number\
    \},\
    neighborhood: String\
  \},\
  contact: \{\
    phone: String,\
    email: String,\
    website: String\
  \},\
  description: String,\
  amenities: \{\
    general: [String], // WiFi, Parking, Pool, etc.\
    room: [String], // AC, TV, Minibar, etc.\
    business: [String], // Conference rooms, Business center, etc.\
    recreation: [String] // Gym, Spa, Beach access, etc.\
  \},\
  images: [\{\
    url: String,\
    caption: String,\
    type: String // room, lobby, exterior, amenity\
  \}],\
  rooms: [\{\
    type: String,\
    name: String,\
    description: String,\
    maxOccupancy: Number,\
    size: String,\
    bedTypes: [String],\
    amenities: [String],\
    images: [String],\
    basePrice: Number,\
    availability: Number\
  \}],\
  policies: \{\
    checkIn: String,\
    checkOut: String,\
    cancellation: String,\
    childrenAllowed: Boolean,\
    petsAllowed: Boolean,\
    smokingAllowed: Boolean\
  \},\
  reviews: \{\
    average: Number,\
    count: Number,\
    distribution: \{\
      5: Number,\
      4: Number,\
      3: Number,\
      2: Number,\
      1: Number\
    \}\
  \},\
  pricing: \{\
    currency: String,\
    startingPrice: Number,\
    taxesIncluded: Boolean\
  \},\
  nearbyAttractions: [\{\
    name: String,\
    type: String,\
    distance: String\
  \}],\
  source: String,\
  lastUpdated: \{\
    type: Date,\
    default: Date.now\
  \}\
\}, \{\
  timestamps: true\
\});\
\
// Index for location-based searching\
hotelSchema.index(\{ 'location.coordinates': '2dsphere' \});\
hotelSchema.index(\{ 'location.city': 1, starRating: -1 \});\
\
module.exports = mongoose.model('Hotel', hotelSchema);\
\
// ===== AUTH ROUTES =====\
// Save this as backend/routes/auth.js\
const express = require('express');\
const router = express.Router();\
const \{ body, validationResult \} = require('express-validator');\
const User = require('../models/User');\
const \{ sendEmail \} = require('../utils/email');\
const crypto = require('crypto');\
\
// @route   POST /api/auth/register\
// @desc    Register a new user\
// @access  Public\
router.post('/register', [\
  body('name').not().isEmpty().trim().escape(),\
  body('email').isEmail().normalizeEmail(),\
  body('password').isLength(\{ min: 6 \})\
], async (req, res) => \{\
  const errors = validationResult(req);\
  if (!errors.isEmpty()) \{\
    return res.status(400).json(\{ errors: errors.array() \});\
  \}\
\
  const \{ name, email, password \} = req.body;\
\
  try \{\
    // Check if user exists\
    let user = await User.findOne(\{ email \});\
    if (user) \{\
      return res.status(400).json(\{ message: 'User already exists' \});\
    \}\
\
    // Create user\
    user = await User.create(\{\
      name,\
      email,\
      password\
    \});\
\
    // Generate email verification token\
    const verifyToken = crypto.randomBytes(20).toString('hex');\
    user.emailVerificationToken = crypto\
      .createHash('sha256')\
      .update(verifyToken)\
      .digest('hex');\
    \
    await user.save();\
\
    // Send verification email\
    const verifyUrl = `$\{process.env.FRONTEND_URL\}/verify-email/$\{verifyToken\}`;\
    await sendEmail(\{\
      email: user.email,\
      subject: 'Welcome to REVIR - Verify Your Email',\
      message: `Please click this link to verify your email: $\{verifyUrl\}`\
    \});\
\
    // Generate JWT\
    const token = user.getSignedJwtToken();\
\
    res.status(201).json(\{\
      success: true,\
      token,\
      user: \{\
        id: user._id,\
        name: user.name,\
        email: user.email,\
        role: user.role\
      \}\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   POST /api/auth/login\
// @desc    Login user\
// @access  Public\
router.post('/login', [\
  body('email').isEmail().normalizeEmail(),\
  body('password').exists()\
], async (req, res) => \{\
  const errors = validationResult(req);\
  if (!errors.isEmpty()) \{\
    return res.status(400).json(\{ errors: errors.array() \});\
  \}\
\
  const \{ email, password \} = req.body;\
\
  try \{\
    // Check if user exists\
    const user = await User.findOne(\{ email \}).select('+password');\
    if (!user) \{\
      return res.status(401).json(\{ message: 'Invalid credentials' \});\
    \}\
\
    // Check password\
    const isMatch = await user.matchPassword(password);\
    if (!isMatch) \{\
      return res.status(401).json(\{ message: 'Invalid credentials' \});\
    \}\
\
    // Update last login\
    user.lastLogin = Date.now();\
    await user.save();\
\
    // Generate JWT\
    const token = user.getSignedJwtToken();\
\
    res.json(\{\
      success: true,\
      token,\
      user: \{\
        id: user._id,\
        name: user.name,\
        email: user.email,\
        role: user.role,\
        preferences: user.preferences\
      \}\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   POST /api/auth/forgot-password\
// @desc    Send password reset email\
// @access  Public\
router.post('/forgot-password', [\
  body('email').isEmail().normalizeEmail()\
], async (req, res) => \{\
  const \{ email \} = req.body;\
\
  try \{\
    const user = await User.findOne(\{ email \});\
    if (!user) \{\
      return res.status(404).json(\{ message: 'User not found' \});\
    \}\
\
    // Generate reset token\
    const resetToken = crypto.randomBytes(20).toString('hex');\
    user.passwordResetToken = crypto\
      .createHash('sha256')\
      .update(resetToken)\
      .digest('hex');\
    user.passwordResetExpire = Date.now() + 10 * 60 * 1000; // 10 minutes\
\
    await user.save();\
\
    // Send reset email\
    const resetUrl = `$\{process.env.FRONTEND_URL\}/reset-password/$\{resetToken\}`;\
    await sendEmail(\{\
      email: user.email,\
      subject: 'REVIR Password Reset',\
      message: `Click this link to reset your password: $\{resetUrl\}`\
    \});\
\
    res.json(\{ message: 'Password reset email sent' \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   PUT /api/auth/reset-password/:token\
// @desc    Reset password\
// @access  Public\
router.put('/reset-password/:token', [\
  body('password').isLength(\{ min: 6 \})\
], async (req, res) => \{\
  const \{ password \} = req.body;\
  const resetPasswordToken = crypto\
    .createHash('sha256')\
    .update(req.params.token)\
    .digest('hex');\
\
  try \{\
    const user = await User.findOne(\{\
      passwordResetToken: resetPasswordToken,\
      passwordResetExpire: \{ $gt: Date.now() \}\
    \});\
\
    if (!user) \{\
      return res.status(400).json(\{ message: 'Invalid or expired token' \});\
    \}\
\
    // Set new password\
    user.password = password;\
    user.passwordResetToken = undefined;\
    user.passwordResetExpire = undefined;\
    await user.save();\
\
    res.json(\{ message: 'Password reset successful' \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
module.exports = router;\
\
// ===== FLIGHT ROUTES =====\
// Save this as backend/routes/flights.js\
const express = require('express');\
const router = express.Router();\
const \{ protect \} = require('../middleware/auth');\
const \{ searchFlights \} = require('../services/flightService');\
const Flight = require('../models/Flight');\
\
// @route   POST /api/flights/search\
// @desc    Search for flights\
// @access  Public\
router.post('/search', async (req, res) => \{\
  try \{\
    const \{\
      from,\
      to,\
      departDate,\
      returnDate,\
      passengers,\
      class: flightClass\
    \} = req.body;\
\
    // Call flight search service (integrates with multiple APIs)\
    const flights = await searchFlights(\{\
      origin: from,\
      destination: to,\
      departureDate: departDate,\
      returnDate,\
      adults: passengers,\
      travelClass: flightClass\
    \});\
\
    res.json(\{\
      success: true,\
      count: flights.length,\
      data: flights\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Error searching flights' \});\
  \}\
\});\
\
// @route   GET /api/flights/:id\
// @desc    Get flight details\
// @access  Public\
router.get('/:id', async (req, res) => \{\
  try \{\
    const flight = await Flight.findById(req.params.id);\
    if (!flight) \{\
      return res.status(404).json(\{ message: 'Flight not found' \});\
    \}\
    res.json(\{ success: true, data: flight \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   POST /api/flights/price-alert\
// @desc    Set price alert for a flight\
// @access  Private\
router.post('/price-alert', protect, async (req, res) => \{\
  try \{\
    const \{ flightId, targetPrice \} = req.body;\
    \
    // Add price alert logic here\
    // This would typically involve a background job that monitors prices\
    \
    res.json(\{\
      success: true,\
      message: 'Price alert set successfully'\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   GET /api/flights/trending\
// @desc    Get trending flight destinations\
// @access  Public\
router.get('/trending/destinations', async (req, res) => \{\
  try \{\
    // This would aggregate booking data to find trending destinations\
    const trending = [\
      \{ city: 'Paris', country: 'France', avgPrice: 599 \},\
      \{ city: 'Tokyo', country: 'Japan', avgPrice: 899 \},\
      \{ city: 'New York', country: 'USA', avgPrice: 299 \},\
      \{ city: 'Dubai', country: 'UAE', avgPrice: 699 \},\
      \{ city: 'London', country: 'UK', avgPrice: 499 \}\
    ];\
    \
    res.json(\{ success: true, data: trending \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
module.exports = router;\
\
// ===== BOOKING ROUTES =====\
// Save this as backend/routes/bookings.js\
const express = require('express');\
const router = express.Router();\
const \{ protect \} = require('../middleware/auth');\
const Booking = require('../models/Booking');\
const \{ processPayment \} = require('../services/paymentService');\
const \{ sendBookingConfirmation \} = require('../utils/email');\
\
// @route   POST /api/bookings\
// @desc    Create a new booking\
// @access  Private\
router.post('/', protect, async (req, res) => \{\
  try \{\
    const bookingData = \{\
      ...req.body,\
      user: req.user._id\
    \};\
\
    // Create booking\
    const booking = await Booking.create(bookingData);\
\
    // Process payment\
    if (req.body.paymentMethod) \{\
      const paymentResult = await processPayment(\{\
        amount: booking.pricing.total,\
        currency: booking.pricing.currency,\
        paymentMethod: req.body.paymentMethod,\
        bookingId: booking._id\
      \});\
\
      booking.payment = \{\
        method: req.body.paymentMethod,\
        status: paymentResult.status,\
        transactionId: paymentResult.transactionId,\
        paidAt: new Date()\
      \};\
\
      if (paymentResult.status === 'succeeded') \{\
        booking.status = 'confirmed';\
      \}\
\
      await booking.save();\
    \}\
\
    // Send confirmation email\
    await sendBookingConfirmation(booking);\
\
    res.status(201).json(\{\
      success: true,\
      data: booking\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Error creating booking' \});\
  \}\
\});\
\
// @route   GET /api/bookings\
// @desc    Get user's bookings\
// @access  Private\
router.get('/', protect, async (req, res) => \{\
  try \{\
    const bookings = await Booking.find(\{ user: req.user._id \})\
      .sort('-createdAt');\
\
    res.json(\{\
      success: true,\
      count: bookings.length,\
      data: bookings\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   GET /api/bookings/:id\
// @desc    Get booking details\
// @access  Private\
router.get('/:id', protect, async (req, res) => \{\
  try \{\
    const booking = await Booking.findOne(\{\
      _id: req.params.id,\
      user: req.user._id\
    \});\
\
    if (!booking) \{\
      return res.status(404).json(\{ message: 'Booking not found' \});\
    \}\
\
    res.json(\{\
      success: true,\
      data: booking\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
// @route   PUT /api/bookings/:id/cancel\
// @desc    Cancel a booking\
// @access  Private\
router.put('/:id/cancel', protect, async (req, res) => \{\
  try \{\
    const booking = await Booking.findOne(\{\
      _id: req.params.id,\
      user: req.user._id\
    \});\
\
    if (!booking) \{\
      return res.status(404).json(\{ message: 'Booking not found' \});\
    \}\
\
    if (booking.status !== 'confirmed') \{\
      return res.status(400).json(\{ message: 'Cannot cancel this booking' \});\
    \}\
\
    // Process refund logic here\
    booking.status = 'cancelled';\
    await booking.save();\
\
    res.json(\{\
      success: true,\
      data: booking\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Server error' \});\
  \}\
\});\
\
module.exports = router;\
\
// ===== AI ROUTES =====\
// Save this as backend/routes/ai.js\
const express = require('express');\
const router = express.Router();\
const \{ protect \} = require('../middleware/auth');\
const \{ getAIRecommendations, chatWithREVA \} = require('../services/aiService');\
\
// @route   POST /api/ai/recommendations\
// @desc    Get AI recommendations\
// @access  Private\
router.post('/recommendations', protect, async (req, res) => \{\
  try \{\
    const \{ type, preferences, budget, dates \} = req.body;\
    \
    const recommendations = await getAIRecommendations(\{\
      userId: req.user._id,\
      type,\
      preferences,\
      budget,\
      dates\
    \});\
\
    res.json(\{\
      success: true,\
      data: recommendations\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Error getting recommendations' \});\
  \}\
\});\
\
// @route   POST /api/ai/chat\
// @desc    Chat with REVA AI\
// @access  Private\
router.post('/chat', protect, async (req, res) => \{\
  try \{\
    const \{ message, context \} = req.body;\
    \
    const response = await chatWithREVA(\{\
      userId: req.user._id,\
      message,\
      context\
    \});\
\
    res.json(\{\
      success: true,\
      data: response\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Error processing chat' \});\
  \}\
\});\
\
// @route   POST /api/ai/price-prediction\
// @desc    Get price predictions\
// @access  Public\
router.post('/price-prediction', async (req, res) => \{\
  try \{\
    const \{ route, dates \} = req.body;\
    \
    // AI price prediction logic here\
    const prediction = \{\
      currentPrice: 450,\
      predictedPrice: 380,\
      bestTimeToBook: '2 weeks before departure',\
      priceHistory: [\
        \{ date: '2024-01-01', price: 420 \},\
        \{ date: '2024-01-15', price: 450 \},\
        \{ date: '2024-02-01', price: 380 \}\
      ],\
      recommendation: 'Wait - prices expected to drop by 15% in the next 2 weeks'\
    \};\
\
    res.json(\{\
      success: true,\
      data: prediction\
    \});\
  \} catch (error) \{\
    console.error(error);\
    res.status(500).json(\{ message: 'Error predicting prices' \});\
  \}\
\});\
\
module.exports = router;\
\
// ===== AUTH MIDDLEWARE =====\
// Save this as backend/middleware/auth.js\
const jwt = require('jsonwebtoken');\
const User = require('../models/User');\
\
exports.protect = async (req, res, next) => \{\
  let token;\
\
  if (\
    req.headers.authorization &&\
    req.headers.authorization.startsWith('Bearer')\
  ) \{\
    token = req.headers.authorization.split(' ')[1];\
  \}\
\
  if (!token) \{\
    return res.status(401).json(\{ message: 'Not authorized to access this route' \});\
  \}\
\
  try \{\
    // Verify token\
    const decoded = jwt.verify(token, process.env.JWT_SECRET);\
    req.user = await User.findById(decoded.id);\
    next();\
  \} catch (error) \{\
    return res.status(401).json(\{ message: 'Not authorized to access this route' \});\
  \}\
\};\
\
exports.authorize = (...roles) => \{\
  return (req, res, next) => \{\
    if (!roles.includes(req.user.role)) \{\
      return res.status(403).json(\{\
        message: `User role $\{req.user.role\} is not authorized to access this route`\
      \});\
    \}\
    next();\
  \};\
\};\
\
// ===== EMAIL UTILITY =====\
// Save this as backend/utils/email.js\
const nodemailer = require('nodemailer');\
\
const transporter = nodemailer.createTransport(\{\
  host: process.env.EMAIL_HOST,\
  port: process.env.EMAIL_PORT,\
  auth: \{\
    user: process.env.EMAIL_USER,\
    pass: process.env.EMAIL_PASS\
  \}\
\});\
\
exports.sendEmail = async (options) => \{\
  const mailOptions = \{\
    from: `REVIR <$\{process.env.EMAIL_USER\}>`,\
    to: options.email,\
    subject: options.subject,\
    text: options.message,\
    html: options.html\
  \};\
\
  await transporter.sendMail(mailOptions);\
\};\
\
exports.sendBookingConfirmation = async (booking) => \{\
  const html = `\
    <h1>Booking Confirmation</h1>\
    <p>Dear Customer,</p>\
    <p>Your booking has been confirmed!</p>\
    <p><strong>Booking Reference:</strong> $\{booking.bookingReference\}</p>\
    <p><strong>Total Amount:</strong> $\{booking.pricing.currency\} $\{booking.pricing.total\}</p>\
    <p>Thank you for choosing REVIR!</p>\
  `;\
\
  await this.sendEmail(\{\
    email: booking.user.email,\
    subject: 'REVIR Booking Confirmation',\
    html\
  \});\
\};\
\
// ===== FLIGHT SERVICE =====\
// Save this as backend/services/flightService.js\
const axios = require('axios');\
\
// Mock flight search - replace with actual API integration\
exports.searchFlights = async (searchParams) => \{\
  try \{\
    // In production, integrate with Amadeus, Skyscanner, etc.\
    // const amadeusToken = await getAmadeusToken();\
    // const response = await axios.get('https://api.amadeus.com/v2/shopping/flight-offers', \{\
    //   headers: \{ Authorization: `Bearer $\{amadeusToken\}` \},\
    //   params: searchParams\
    // \});\
\
    // Mock data for demo\
    const mockFlights = [\
      \{\
        airline: \{ code: 'UA', name: 'United Airlines' \},\
        flightNumber: 'UA123',\
        departure: \{\
          airport: \{ code: 'JFK', name: 'John F. Kennedy' \},\
          scheduledTime: new Date(searchParams.departureDate)\
        \},\
        arrival: \{\
          airport: \{ code: 'LHR', name: 'London Heathrow' \},\
          scheduledTime: new Date(searchParams.departureDate)\
        \},\
        duration: \{ hours: 7, minutes: 45 \},\
        classes: [\
          \{\
            type: searchParams.travelClass || 'economy',\
            price: \{ amount: 599, currency: 'USD' \},\
            availability: 25\
          \}\
        ]\
      \}\
    ];\
\
    return mockFlights;\
  \} catch (error) \{\
    console.error('Flight search error:', error);\
    throw error;\
  \}\
\};\
\
// ===== AI SERVICE =====\
// Save this as backend/services/aiService.js\
exports.getAIRecommendations = async (params) => \{\
  try \{\
    // In production, integrate with OpenAI or your AI model\
    // const response = await openai.createCompletion(\{\
    //   model: "text-davinci-003",\
    //   prompt: `Generate travel recommendations for $\{params.type\}...`,\
    //   max_tokens: 200\
    // \});\
\
    // Mock AI recommendations\
    const recommendations = [\
      \{\
        type: 'flight',\
        suggestion: 'Book your flight on Tuesday afternoon for 15% savings',\
        confidence: 0.85,\
        savings: 150\
      \},\
      \{\
        type: 'alternative',\
        suggestion: 'Consider flying to Newark instead of JFK to save $200',\
        confidence: 0.78,\
        savings: 200\
      \}\
    ];\
\
    return recommendations;\
  \} catch (error) \{\
    console.error('AI recommendation error:', error);\
    throw error;\
  \}\
\};\
\
exports.chatWithREVA = async (params) => \{\
  try \{\
    // Mock REVA response\
    const response = \{\
      message: "I found some great options for your trip! Based on your preferences, I recommend booking the morning flight for better on-time performance.",\
      suggestions: [\
        \{ type: 'flight', details: 'UA123 at 8:00 AM - 95% on-time' \},\
        \{ type: 'tip', details: 'Book within the next 24 hours for best price' \}\
      ]\
    \};\
\
    return response;\
  \} catch (error) \{\
    console.error('REVA chat error:', error);\
    throw error;\
  \}\
\};\
\
// ===== PAYMENT SERVICE =====\
// Save this as backend/services/paymentService.js\
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\
\
exports.processPayment = async (paymentData) => \{\
  try \{\
    // In production, implement actual Stripe payment processing\
    // const paymentIntent = await stripe.paymentIntents.create(\{\
    //   amount: paymentData.amount * 100, // Stripe uses cents\
    //   currency: paymentData.currency,\
    //   payment_method: paymentData.paymentMethod,\
    //   confirm: true\
    // \});\
\
    // Mock payment response\
    return \{\
      status: 'succeeded',\
      transactionId: 'pi_' + Date.now(),\
      amount: paymentData.amount,\
      currency: paymentData.currency\
    \};\
  \} catch (error) \{\
    console.error('Payment processing error:', error);\
    throw error;\
  \}\
\};\
\
// ===== CRON JOBS =====\
// Save this as backend/jobs/priceMonitor.js\
const cron = require('node-cron');\
const User = require('../models/User');\
const \{ sendEmail \} = require('../utils/email');\
\
// Run every hour to check price alerts\
cron.schedule('0 * * * *', async () => \{\
  console.log('Running price monitoring job...');\
  \
  try \{\
    // Get all users with active price alerts\
    const users = await User.find(\{\
      'savedSearches': \{ $exists: true, $ne: [] \}\
    \});\
\
    for (const user of users) \{\
      // Check each saved search for price changes\
      for (const search of user.savedSearches) \{\
        // Implement price checking logic here\
        // If price dropped, send notification\
      \}\
    \}\
  \} catch (error) \{\
    console.error('Price monitoring error:', error);\
  \}\
\});\
\
// ===== SOCKET.IO SETUP =====\
// Add this to server.js after app initialization\
/*\
const server = require('http').createServer(app);\
const io = require('socket.io')(server, \{\
  cors: \{\
    origin: process.env.FRONTEND_URL,\
    credentials: true\
  \}\
\});\
\
// Socket.io for real-time features\
io.on('connection', (socket) => \{\
  console.log('New client connected');\
\
  // Join user's personal room\
  socket.on('join', (userId) => \{\
    socket.join(`user-$\{userId\}`);\
  \});\
\
  // Real-time price updates\
  socket.on('track-price', (flightId) => \{\
    socket.join(`flight-$\{flightId\}`);\
  \});\
\
  socket.on('disconnect', () => \{\
    console.log('Client disconnected');\
  \});\
\});\
\
// Use server.listen instead of app.listen\
server.listen(PORT, () => \{\
  console.log(`REVIR Backend running on port $\{PORT\}`);\
\});\
*/}